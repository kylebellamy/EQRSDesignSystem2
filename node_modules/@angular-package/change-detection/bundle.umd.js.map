{"version":3,"file":"bundle.umd.js","sources":["packages/decorator/src/setter-getter.class.ts","packages/decorator/src/error-messages.func.ts","packages/decorator/src/change-detector.class.ts","packages/decorator/src/instance-of.func.ts","packages/decorator/src/change-detection.decorator.ts"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { LookupInterface } from './interface';\nimport { PropertiesInterface } from './interface';\nimport { ErrorMessages } from './error-messages.func';\n\n/**\n * Manage component properties setters and getters.\n * @export\n * @class SetterGetterClass\n */\nexport class SetterGetterClass {\n  private lookup: LookupInterface = { getter: {}, setter: {} };\n\n  constructor(public target?: any) {\n    return this;\n  }\n\n  /**\n   * Get and store getter by property name.\n   * @param {string} property\n   * @returns {*}\n   * @memberof SetterGetterClass\n   */\n  getter(property: string): any {\n    if (this.target) {\n      return this.lookup.getter[property] = this.target.prototype.__lookupGetter__(property);\n    }\n  }\n\n  /**\n   * Get and store setter by property name.\n   * @param {string} property\n   * @returns {*}\n   * @memberof SetterGetterClass\n   */\n  setter(property: string): any {\n    if (this.target) {\n      return this.lookup.setter[property] = this.target.prototype.__lookupSetter__(property);\n    }\n  }\n\n  /**\n   * Return specified by property name getter function directly from __proto__ component or stored lookup.\n   * @param {string} property\n   * @param {*} [component]\n   * @returns {*}\n   * @memberof SetterGetterClass\n   */\n  lookupGetter(property: string, component?: any): any {\n    if (component) {\n      return component.__proto__.__lookupGetter__(property);\n    } else if (this.target) {\n      return this.lookup.getter[property];\n    }\n  }\n\n  /**\n   * Return specified by property name setter function directly from __proto__ component or stored lookup.\n   * @param {string} property\n   * @param {*} [component]\n   * @returns {*}\n   * @memberof SetterGetterClass\n   */\n  lookupSetter(property: string, component?: any): any {\n    if (component) {\n      return component.__proto__.__lookupSetter__(property);\n    } else if (this.target) {\n      return this.lookup.setter[property];\n    }\n  }\n\n  /**\n   *\n   *\n   * @param {*} component\n   * @memberof SetterGetterClass\n   */\n  replaceAll(component: any): void {\n    if (component) {\n      _.each(component.changeDetection.properties, (value: any, property: string) => {\n        this.replace(component, property);\n      });\n    }\n  }\n\n  /**\n   * Replace setter and getter in provided component and with specific property name to have original setter and getter and detection\n   * changes.\n   * @param {*} component\n   * @param {string} property\n   * @memberof SetterGetterClass\n   */\n  replace(component: any, property: string, originalName?: string): void {\n    const originalValue = component[property];\n    const getter = this.lookupGetter(property, component);\n    const setter = this.lookupSetter(property, component);\n    Object.defineProperty(component, property, {\n      set: function (value: any) {\n        if (setter !== undefined) {\n          setter.apply(this, arguments);\n        } else {\n          this[`_${property}`] = value;\n        }\n        if (this.hasOwnProperty('changeDetection')) {\n          if (this['changeDetection'].properties[property] === true) {\n            this['__detect']();\n          }\n        }\n      },\n      get: function () {\n        if (getter) {\n          return getter.apply(this, arguments);\n        } else {\n          return this[`_${property}`];\n        }\n      }\n    });\n    component[property] = originalValue;\n  }\n\n  /**\n   *\n   *\n   * @param {PropertiesInterface} properties\n   * @returns {this}\n   * @memberof SetterGetterClass\n   */\n  store(properties: PropertiesInterface): this {\n    if (_.each !== undefined) {\n      _.each(properties, (value: any, property: string) => {\n        this.getter(property);\n        this.setter(property);\n      });\n    } else {\n      throw new Error(ErrorMessages('lodash imported as _').undefined);\n    }\n    return this;\n  }\n}\n","\nexport function ErrorMessages(name: string): any {\n  const messages = {\n    undefined: `${name} is not defined`\n  };\n  if (name) {\n    return messages;\n  }\n}\n","import { ChangeDetectorRef } from '@angular/core';\nimport * as _ from 'lodash-es';\n\n// internal\nimport { instanceOf } from './instance-of.func';\nimport { PropertiesInterface } from './interface';\n\n/**\n * @export\n * @class ChangeDetectorClass\n */\nexport class ChangeDetectorClass {\n  // Change detector instance property name.\n  private cd: string;\n\n  /**\n   * Creates an instance of ChangeDetectorClass.\n   * @param {*} component\n   * @memberof ChangeDetectorClass\n   */\n  constructor(public component: any) {\n    this.find(component);\n  }\n\n  /**\n   * Detach component.\n   * @memberof ChangeDetectorClass\n   */\n  detach(): void {\n    if (this.cd) {\n      this.component[this.cd].detach();\n    }\n  }\n\n  /**\n   * Detect changes in component.\n   * @memberof ChangeDetectorClass\n   */\n  detect(): void {\n    if (this.cd) {\n      this.component[this.cd].detectChanges();\n    }\n  }\n\n  /**\n   * Search for component changes again.\n   * @memberof ChangeDetectorClass\n   */\n  reattach(): void {\n    if (this.cd) {\n      this.component[this.cd].reattach();\n    }\n  }\n\n  /**\n   * Search for change detector instance in specified component and return its key.\n   * @private\n   * @param {*} component\n   * @returns {(string | void)}\n   * @memberof ChangeDetectorClass\n   */\n  private find(component: any): string | void {\n    let found: any;\n    _.each(component, (ChangeDetectorRefInstance: ChangeDetectorRef, key: string) => {\n      if (component[key] instanceof Object) {\n        if (instanceOf<ChangeDetectorRef>(component[key], 'detectChanges')) {\n          if (component[key].detectChanges instanceof Function) {\n            found = key;\n            return false;\n          }\n        }\n      }\n    });\n    return this.cd = found;\n  }\n}\n","export function instanceOf<T>(object: any, find: string): object is T {\n  return find in object;\n}\n","// external\nimport * as _ from 'lodash-es';\n\n// internal\nimport { ChangeDetectionInterface, LookupInterface, LookupItemInterface, PropertiesInterface } from './interface';\nimport { SetterGetterClass } from './setter-getter.class';\nimport { ChangeDetectorClass } from './change-detector.class';\n\n/**\n * Initially set change detector status to `Detached`, and with provided `properties` detect changes by using `set`.\n * @export\n * @param {boolean} [detection=true]\n * @param {PropertiesInterface} properties\n * @returns {Function}\n */\nexport function ChangeDetection(detection = true, properties: PropertiesInterface): Function {\n  return function (target: any) {\n    // Store original setters and getters provided `properties`.\n    const setterGetterClass = new SetterGetterClass(target).store(properties);\n    // Store original `ngAfterContentInit()` method.\n    const ngAfterContentInit = target.prototype.ngAfterContentInit;\n    // Store original `ngOnInit()` method.\n    const ngOnInit = target.prototype.ngOnInit;\n    // Declare new `ngOnInit()` and apply original to it.\n    target.prototype.ngOnInit = function () {\n      // Create change detector instance.\n      const changeDetector = new ChangeDetectorClass(this);\n      // Create local instance of properties variable.\n      properties = Object.assign({}, properties);\n      // Add `changeDetection` property to component.\n      this.changeDetection = <ChangeDetectionInterface>{\n        detection,\n        properties,\n        ready: false\n      };\n      // Add some properties.\n      Object.defineProperties(this, {\n        /*\n          Detach this component.\n        */\n        __detach: {\n          writable: false,\n          value: function(): void {\n            changeDetector.detach();\n          }\n        },\n        /*\n          Detect changes in this component.\n        */\n        __detect: {\n          writable: false,\n          value: function (): void {\n            changeDetector.detect();\n          }\n        },\n\n        /*\n          Status of detection true or false.\n        */\n        __detection: {\n          set: function (value: boolean) {\n            this.changeDetection.detection = value;\n            if (this.changeDetection.ready === true) {\n              if (value === false) {\n                changeDetector.detach();\n              } else if (value === true) {\n                this.changeDetector.reattach();\n              }\n              changeDetector.detect();\n            }\n          },\n          get: function (): boolean {\n            return this.changeDetection.detection;\n          }\n        },\n\n        /*\n          Properties marked to make change detection working when component is `Detached`.\n        */\n        __properties: {\n          set: function (value: PropertiesInterface) {\n            if (this.changeDetection.ready === true) {\n              changeDetector.detect();\n            }\n            this.changeDetection.properties = value;\n          },\n          get: function (): PropertiesInterface {\n            return this.changeDetection.properties;\n          }\n        },\n        __reattach: {\n          writable: false,\n          value: function(): void {\n            changeDetector.reattach();\n          }\n        }\n      });\n\n      /*\n        Replace all provided properties to detect changes when true.\n      */\n      setterGetterClass.replaceAll(this);\n\n      if (ngOnInit) {\n        ngOnInit.apply(this, arguments);\n      }\n    };\n\n    // Declare new `ngAfterContentInit()` and apply original to it.\n    target.prototype.ngAfterContentInit = function () {\n      this.changeDetection.ready = true;\n      setTimeout(() => {\n        this.__detection = detection;\n      }, 0);\n      if (ngAfterContentInit) {\n        ngAfterContentInit.apply(this, arguments);\n      }\n    };\n  };\n}\n"],"names":["[object Object]","target","this","getter","setter","property","lookup","prototype","__lookupGetter__","__lookupSetter__","component","__proto__","_.each","changeDetection","properties","value","replace","originalName","originalValue","lookupGetter","lookupSetter","Object","defineProperty","set","undefined","apply","arguments","hasOwnProperty","get","Error","name","ErrorMessages","find","cd","detach","detectChanges","reattach","found","object","ChangeDetectorRefInstance","key","Function","detection","setterGetterClass","SetterGetterClass","store","ngAfterContentInit","ngOnInit","changeDetector","ChangeDetectorClass","assign","ready","defineProperties","__detach","writable","__detect","detect","__detection","__properties","__reattach","replaceAll","setTimeout"],"mappings":"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"}