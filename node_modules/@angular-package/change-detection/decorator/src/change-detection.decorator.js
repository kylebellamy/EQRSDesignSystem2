import { SetterGetterClass } from './setter-getter.class';
import { ChangeDetectorClass } from './change-detector.class';
export function ChangeDetection(detection = true, properties) {
    return function (target) {
        const setterGetterClass = new SetterGetterClass(target).store(properties);
        const ngAfterContentInit = target.prototype.ngAfterContentInit;
        const ngOnInit = target.prototype.ngOnInit;
        target.prototype.ngOnInit = function () {
            const changeDetector = new ChangeDetectorClass(this);
            properties = Object.assign({}, properties);
            this.changeDetection = {
                detection,
                properties,
                ready: false
            };
            Object.defineProperties(this, {
                __detach: {
                    writable: false,
                    value: function () {
                        changeDetector.detach();
                    }
                },
                __detect: {
                    writable: false,
                    value: function () {
                        changeDetector.detect();
                    }
                },
                __detection: {
                    set: function (value) {
                        this.changeDetection.detection = value;
                        if (this.changeDetection.ready === true) {
                            if (value === false) {
                                changeDetector.detach();
                            }
                            else if (value === true) {
                                this.changeDetector.reattach();
                            }
                            changeDetector.detect();
                        }
                    },
                    get: function () {
                        return this.changeDetection.detection;
                    }
                },
                __properties: {
                    set: function (value) {
                        if (this.changeDetection.ready === true) {
                            changeDetector.detect();
                        }
                        this.changeDetection.properties = value;
                    },
                    get: function () {
                        return this.changeDetection.properties;
                    }
                },
                __reattach: {
                    writable: false,
                    value: function () {
                        changeDetector.reattach();
                    }
                }
            });
            setterGetterClass.replaceAll(this);
            if (ngOnInit) {
                ngOnInit.apply(this, arguments);
            }
        };
        target.prototype.ngAfterContentInit = function () {
            this.changeDetection.ready = true;
            setTimeout(() => {
                this.__detection = detection;
            }, 0);
            if (ngAfterContentInit) {
                ngAfterContentInit.apply(this, arguments);
            }
        };
    };
}
//# sourceMappingURL=change-detection.decorator.js.map