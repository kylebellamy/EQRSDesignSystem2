import * as _ from 'lodash-es';
import { ErrorMessages } from './error-messages.func';
export class SetterGetterClass {
    constructor(target) {
        this.target = target;
        this.lookup = { getter: {}, setter: {} };
        return this;
    }
    getter(property) {
        if (this.target) {
            return this.lookup.getter[property] = this.target.prototype.__lookupGetter__(property);
        }
    }
    setter(property) {
        if (this.target) {
            return this.lookup.setter[property] = this.target.prototype.__lookupSetter__(property);
        }
    }
    lookupGetter(property, component) {
        if (component) {
            return component.__proto__.__lookupGetter__(property);
        }
        else if (this.target) {
            return this.lookup.getter[property];
        }
    }
    lookupSetter(property, component) {
        if (component) {
            return component.__proto__.__lookupSetter__(property);
        }
        else if (this.target) {
            return this.lookup.setter[property];
        }
    }
    replaceAll(component) {
        if (component) {
            _.each(component.changeDetection.properties, (value, property) => {
                this.replace(component, property);
            });
        }
    }
    replace(component, property, originalName) {
        const originalValue = component[property];
        const getter = this.lookupGetter(property, component);
        const setter = this.lookupSetter(property, component);
        Object.defineProperty(component, property, {
            set: function (value) {
                if (setter !== undefined) {
                    setter.apply(this, arguments);
                }
                else {
                    this[`_${property}`] = value;
                }
                if (this.hasOwnProperty('changeDetection')) {
                    if (this['changeDetection'].properties[property] === true) {
                        this['__detect']();
                    }
                }
            },
            get: function () {
                if (getter) {
                    return getter.apply(this, arguments);
                }
                else {
                    return this[`_${property}`];
                }
            }
        });
        component[property] = originalValue;
    }
    store(properties) {
        if (_.each !== undefined) {
            _.each(properties, (value, property) => {
                this.getter(property);
                this.setter(property);
            });
        }
        else {
            throw new Error(ErrorMessages('lodash imported as _').undefined);
        }
        return this;
    }
}
//# sourceMappingURL=setter-getter.class.js.map