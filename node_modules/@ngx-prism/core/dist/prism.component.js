import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';
import { ChangeDetection } from '@angular-package/change-detection';
import { PrismHoodClass } from './prism.class';
import { PrismService } from './prism.service';
export class PrismComponent extends PrismHoodClass {
    constructor(changeDetectorRef, prismService) {
        super(changeDetectorRef, prismService);
        this.changeDetectorRef = changeDetectorRef;
        this.prismService = prismService;
    }
    ngAfterContentInit() {
        if (this.cd) {
            this.__properties = this.cd;
        }
    }
    ngAfterViewInit() {
        this.ready = true;
        this.highlightElement({
            code: this.code,
            language: this.language
        });
    }
    ngOnInit() { }
}
PrismComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                providers: [PrismService],
                selector: 'ngx-prism',
                template: `<pre class="language-{{language}}" *ngIf="language"><code #el class="language-{{language}}"><ng-content *ngIf="!code"></ng-content></code></pre>`
            },] },
];
PrismComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
    { type: PrismService, },
];
//# sourceMappingURL=prism.component.js.map